{
  "stats": {
    "suites": 4,
    "tests": 6,
    "passes": 1,
    "pending": 0,
    "failures": 5,
    "start": "2022-01-10T20:37:45.261Z",
    "end": "2022-01-10T20:37:45.534Z",
    "duration": 273
  },
  "tests": [
    {
      "title": "is set as Scuber",
      "fullTitle": "index.js companyName is set as Scuber",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "is defined as a const",
      "fullTitle": "index.js companyName is defined as a const",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "Expected companyName to be a const: expected 'let companyName = \\'Scuber\\';\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\n' to match /const companyName/",
        "showDiff": false,
        "actual": "let companyName = 'Scuber';\nit('is set as Scuber', function () {\n    expect(companyName).to.equal('Scuber');\n  });\n\n",
        "stack": "AssertionError: Expected companyName to be a const: expected 'let companyName = \\'Scuber\\';\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\n' to match /const companyName/\n    at Context.<anonymous> (test/indexTest.js:13:21)\n    at processImmediate (node:internal/timers:464:21)"
      }
    },
    {
      "title": "is declared as equal to Chelsea",
      "fullTitle": "index.js mostProfitableNeighborhood is declared as equal to Chelsea",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "ReferenceError: mostProfitableNeighborhood is not defined\n    at Context.<anonymous> (test/indexTest.js:19:14)\n    at processImmediate (node:internal/timers:464:21)",
        "message": "mostProfitableNeighborhood is not defined"
      }
    },
    {
      "title": "is defined using let",
      "fullTitle": "index.js mostProfitableNeighborhood is defined using let",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "Expected mostProfitableNeighborhood to be defined using let: expected 'let companyName = \\'Scuber\\';\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\n' to match /let mostProfitableNeighborhood/",
        "showDiff": false,
        "actual": "let companyName = 'Scuber';\nit('is set as Scuber', function () {\n    expect(companyName).to.equal('Scuber');\n  });\n\n",
        "stack": "AssertionError: Expected mostProfitableNeighborhood to be defined using let: expected 'let companyName = \\'Scuber\\';\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\n' to match /let mostProfitableNeighborhood/\n    at Context.<anonymous> (test/indexTest.js:23:21)\n    at processImmediate (node:internal/timers:464:21)"
      }
    },
    {
      "title": "is declared as equal to Susan Smith",
      "fullTitle": "index.js companyCeo is declared as equal to Susan Smith",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "ReferenceError: companyCeo is not defined\n    at Context.<anonymous> (test/indexTest.js:29:14)\n    at processImmediate (node:internal/timers:464:21)",
        "message": "companyCeo is not defined"
      }
    },
    {
      "title": "is defined using let",
      "fullTitle": "index.js companyCeo is defined using let",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "Expected companyCeo to be defined using let: expected 'let companyName = \\'Scuber\\';\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\n' to match /let companyCeo/",
        "showDiff": false,
        "actual": "let companyName = 'Scuber';\nit('is set as Scuber', function () {\n    expect(companyName).to.equal('Scuber');\n  });\n\n",
        "stack": "AssertionError: Expected companyCeo to be defined using let: expected 'let companyName = \\'Scuber\\';\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\n' to match /let companyCeo/\n    at Context.<anonymous> (test/indexTest.js:33:21)\n    at processImmediate (node:internal/timers:464:21)"
      }
    }
  ],
  "pending": [],
  "failures": [
    {
      "title": "is defined as a const",
      "fullTitle": "index.js companyName is defined as a const",
      "duration": 1,
      "currentRetry": 0,
      "err": {
        "message": "Expected companyName to be a const: expected 'let companyName = \\'Scuber\\';\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\n' to match /const companyName/",
        "showDiff": false,
        "actual": "let companyName = 'Scuber';\nit('is set as Scuber', function () {\n    expect(companyName).to.equal('Scuber');\n  });\n\n",
        "stack": "AssertionError: Expected companyName to be a const: expected 'let companyName = \\'Scuber\\';\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\n' to match /const companyName/\n    at Context.<anonymous> (test/indexTest.js:13:21)\n    at processImmediate (node:internal/timers:464:21)"
      }
    },
    {
      "title": "is declared as equal to Chelsea",
      "fullTitle": "index.js mostProfitableNeighborhood is declared as equal to Chelsea",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "ReferenceError: mostProfitableNeighborhood is not defined\n    at Context.<anonymous> (test/indexTest.js:19:14)\n    at processImmediate (node:internal/timers:464:21)",
        "message": "mostProfitableNeighborhood is not defined"
      }
    },
    {
      "title": "is defined using let",
      "fullTitle": "index.js mostProfitableNeighborhood is defined using let",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "Expected mostProfitableNeighborhood to be defined using let: expected 'let companyName = \\'Scuber\\';\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\n' to match /let mostProfitableNeighborhood/",
        "showDiff": false,
        "actual": "let companyName = 'Scuber';\nit('is set as Scuber', function () {\n    expect(companyName).to.equal('Scuber');\n  });\n\n",
        "stack": "AssertionError: Expected mostProfitableNeighborhood to be defined using let: expected 'let companyName = \\'Scuber\\';\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\n' to match /let mostProfitableNeighborhood/\n    at Context.<anonymous> (test/indexTest.js:23:21)\n    at processImmediate (node:internal/timers:464:21)"
      }
    },
    {
      "title": "is declared as equal to Susan Smith",
      "fullTitle": "index.js companyCeo is declared as equal to Susan Smith",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "stack": "ReferenceError: companyCeo is not defined\n    at Context.<anonymous> (test/indexTest.js:29:14)\n    at processImmediate (node:internal/timers:464:21)",
        "message": "companyCeo is not defined"
      }
    },
    {
      "title": "is defined using let",
      "fullTitle": "index.js companyCeo is defined using let",
      "duration": 0,
      "currentRetry": 0,
      "err": {
        "message": "Expected companyCeo to be defined using let: expected 'let companyName = \\'Scuber\\';\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\n' to match /let companyCeo/",
        "showDiff": false,
        "actual": "let companyName = 'Scuber';\nit('is set as Scuber', function () {\n    expect(companyName).to.equal('Scuber');\n  });\n\n",
        "stack": "AssertionError: Expected companyCeo to be defined using let: expected 'let companyName = \\'Scuber\\';\\nit(\\'is set as Scuber\\', function () {\\n    expect(companyName).to.equal(\\'Scuber\\');\\n  });\\n\\n' to match /let companyCeo/\n    at Context.<anonymous> (test/indexTest.js:33:21)\n    at processImmediate (node:internal/timers:464:21)"
      }
    }
  ],
  "passes": [
    {
      "title": "is set as Scuber",
      "fullTitle": "index.js companyName is set as Scuber",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ]
}